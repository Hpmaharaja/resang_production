// ==================================================================
// MAIN BACKEND SERVER
// ==================================================================

// REQUIRING NECESSARY MODULES
var express     = require('express');
var app         = express();
var bodyParser  = require('body-parser');
var morgan      = require('morgan');
var mongoose    = require('mongoose');
var cors = require('cors');
var multer = require('multer');

var jwt    = require('jsonwebtoken'); // used to create, sign, and verify tokens
var config = require('./config'); // get our config file
var User   = require('./models/user'); // get our mongoose model
var Messages = require('./models/messages');

// =================================
// CONFIGURATION
// =================================
mongoose.connect(config.database); // connect to database
app.set('superSecret', config.secret); // secret variable

// use body parser so we can get info from POST and/or URL parameters
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// use morgan to log requests to the console
app.use(morgan('dev'));

// CORS ISSUE RESOLVED
app.use(cors());

app.set('port', (process.env.PORT || 3000));

// IMAGE STORAGE
var storage = multer.diskStorage({ //multers disk storage settings
        destination: function (req, file, cb) {
            cb(null, 'uploads/');
        },
        filename: function (req, file, cb) {
            var datetimestamp = Date.now();
            cb(null, file.fieldname + '-' + datetimestamp + '.' + file.originalname.split('.')[file.originalname.split('.').length -1]);
        }
});

var upload = multer({ //multer settings
                    storage: storage
                }).single('file');

// =================================
// ROUTES
// =================================

// BASIC ROUTING


app.get('/', function(request, response) {
  response.status(200);
  response.send('<h1>Welcome to Resng!</h1>');
});

app.get('/image', function(req,res) {
  res.status(200);
  res.send('<h1>This Image endpoint works</h1>');
});

app.get('/imageup', function(req,res) {
  res.sendFile(__dirname + '/client/index.html');
});

// REGULAR DATA ROUTES ------------------------------------------------------------

app.post('/message', function(req,res) {
  var nick = new Messages({
    userName: req.body.userName,
    message: req.body.message
  });
  nick.save(function(err) {
    if (err) throw err;
    res.status(200);
    res.json({
      success: true,
      message: 'Message saved successfully!',
    });
    console.log('Message saved successfully!');
  });
});

app.get('/messages', function(req,res) {
  Messages.find({}, function(err, messages) {
    req.socket.setTimeout(10 * 60 * 1000);
    res.status(200);
    res.json(messages);
  });
});

app.post('/images', function(req,res) {
  upload(req,res,function(err){
      if(err){
           //res.status(404);
           res.json({error_code:1,err_desc:err});
           return;
      }
      //res.status(200);
      res.json({error_code:0,err_desc:null});
  });
});

app.get('/images', function(req,res) {
  res.status(200);
  res.json({});
});

app.get('/apidocs', function(req,res) {
  res.status(200);
  res.sendFile(__dirname + '/resangapidocs.html');
});

app.get('/users', function(req,res) {
  User.find({}, function(err, user) {
    res.status(200);
    res.json({data: user});
  });
});

app.post('/auth/register', function(req, res) {
  User.findOne({
    userName: req.body.userName
  }, function(err, user) {
      if (err) throw err;
      if (user) {
        res.status(404);
        res.json({ success: false,
                   message: 'User already exists!',
                   data: {token: "No token authorized!", content: "helloworld"}});
      } else if (!user) {
          var nick = new User({
            userName: req.body.userName,
            passWord: req.body.passWord
          });
          nick.save(function(err) {
            if (err) throw err;

            var token = jwt.sign(nick, app.get('superSecret'), {
              expiresIn: '24h',
              algorithm: 'HS256'
            });
            res.status(200);
            res.json({
              success: true,
              message: 'Enjoy your token!',
              data: {token: token, content: "helloworld"}
            });
            console.log('User saved successfully');
          });
        }
  });
});

// route to authenticate a user (POST http://localhost:8080/api/authenticate)
app.post('/auth/login', function(req, res) {
  User.findOne({
    userName: req.body.userName
  }, function(err, user) {
    if (err) throw err;
    if (!user) {
      res.status(404);
      res.json({ success: false, message: 'Authentication failed. User not found.' });
    } else if (user) {
      if (user.passWord != req.body.passWord) {
        res.status(403);
        res.json({ success: false, message: 'Authentication failed. Wrong password.' });
      } else {
        var token = jwt.sign(user, app.get('superSecret'), {
          expiresIn: "24h" // expires in 24 hours
        });
        res.status(200);
        res.json({
          success: true,
          message: 'Enjoy your token!',
          data: {token: token, content: "helloworld"}
        });
      }
    }
  });
});

// API ROUTES -------------------

// get an instance of the router for api routes
var apiRoutes = express.Router();

// apply the routes to our application with the prefix /api
app.use('/api', apiRoutes);

// route middleware to verify a token
apiRoutes.use(function(req, res, next) {
  // check header or url parameters or post parameters for token
  var token = req.body.token || req.query.token || req.headers['Authorization'];
  // decode token
  if (token) {
    // verifies secret and checks exp
    jwt.verify(token, app.get('superSecret'), function(err, decoded) {
      if (err) {
        return res.json({ success: false, message: 'Failed to authenticate token.' });
      } else {
        // if everything is good, save to request for use in other routes
        req.decoded = decoded;
        next();
      }
    });
  } else {
    // if there is no token
    // return an error
    return res.status(403).send({
        success: false,
        message: 'No token provided.'
    });
  }
});

// route to show a random message (GET http://localhost:8080/api/)
apiRoutes.get('/', function(req, res) {
  res.status(200);
  res.json({ message: 'Welcome to the RESANG API!' });
});

// route to return all users (GET http://localhost:8080/api/users)
apiRoutes.get('/users', function(req, res) {
  User.find({}, function(err, users) {
    res.status(200);
    res.json(users);
  });
});

app.listen(app.get('port'), function() {
  console.log('Node app is running on port', app.get('port'));
});
